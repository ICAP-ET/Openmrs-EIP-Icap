<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="debezium" errorHandlerRef="recordingErrorHandler">
        <from uri="debezium-mysql:extract?databaseServerId={{debezium.db.serverId}}&amp;databaseServerName={{debezium.db.serverName}}&amp;databaseHostname={{openmrs.db.host}}&amp;databasePort={{openmrs.db.port}}&amp;databaseUser={{debezium.db.user}}&amp;databasePassword={{debezium.db.password}}&amp;databaseWhitelist={{openmrs.db.name}}&amp;offsetStorageFileName={{debezium.offsetFilename}}&amp;databaseHistoryFileFilename={{debezium.historyFilename}}&amp;tableWhitelist={{debezium.tablesToSync}}&amp;offsetFlushIntervalMs=0&amp;snapshotMode=initial&amp;snapshotFetchSize=1000&amp;snapshotLockingMode=extended&amp;includeSchemaChanges=false" />

        <log message=":" loggingLevel="DEBUG" />
        <log message="Received DB event: Operation=${headers.CamelDebeziumOperation}, Body=${exchangeProperty.event-body}, Metadata=${headers.CamelDebeziumSourceMetadata}" />
        <setProperty name="event-body">
            <simple>${body}</simple>
        </setProperty>

        <!-- TODO For subclasses, capture the primary key early -->
        <choice>
            <when>
                <simple>${headers.CamelDebeziumOperation} == 'd'</simple>
                <setProperty name="entity-id">
                    <simple>${headers.CamelDebeziumBefore.get('uuid')}</simple>
                </setProperty>
            </when>
            <otherwise>
                <setProperty name="entity-id">
                    <simple>${exchangeProperty.event-body.get('uuid')}</simple>
                </setProperty>
            </otherwise>
        </choice>
        
        <choice>
            <when>
                <simple>${headers.CamelDebeziumOperation} == 'c' || ${headers.CamelDebeziumOperation} == 'u' || ${headers.CamelDebeziumOperation} == 'd'</simple>
                <setProperty name="debezium-table">
                    <simple>${header.CamelDebeziumSourceMetadata.get('table')}</simple>
                </setProperty>

                <when>
                    <simple>${headers.CamelDebeziumOperation} == 'd'</simple>
                    <toD uri="jpa:RetryQueueItem?query=SELECT r from RetryQueueItem r WHERE r.dbEvent.entityTableName='${exchangeProperty.debezium-table}' AND r.dbEvent.entityId='${exchangeProperty.entity-id}'" />
                    <setProperty name="existing-retries">
                        <simple>${body}</simple>
                    </setProperty>
                </when>

                <choice>
                    <when>
                        <simple>${exchangeProperty.debezium-table} == 'test_order' || ${exchangeProperty.debezium-table} == 'drug_order' || ${exchangeProperty.debezium-table} == 'patient'</simple>
                        <choice>
                            <when>
                                <simple>${exchangeProperty.debezium-table} == 'patient'</simple>
                                <setProperty name="debezium-refTable">
                                    <constant>person</constant>
                                </setProperty>
                                <setProperty name="debezium-refColumn">
                                    <constant>person_id</constant>
                                </setProperty>
                                <setProperty name="debezium-column">
                                    <constant>patient_id</constant>
                                </setProperty>
                            </when>
                            <otherwise>
                                <setProperty name="debezium-refTable">
                                    <constant>orders</constant>
                                </setProperty>
                                <setProperty name="debezium-refColumn">
                                    <constant>order_id</constant>
                                </setProperty>
                                <setProperty name="debezium-column">
                                    <constant>order_id</constant>
                                </setProperty>
                            </otherwise>
                        </choice>

                        <log message="Looking up uuid for ${exchangeProperty.debezium-table} from referenced ${exchangeProperty.debezium-refTable} table" loggingLevel="DEBUG" />

                        <toD uri="sql:SELECT uuid FROM ${exchangeProperty.debezium-refTable} WHERE ${exchangeProperty.debezium-refColumn}='${exchangeProperty.event-body.get(${exchangeProperty.debezium-column})}'?dataSource=openmrsDataSource" />

                        <setProperty name="entity-id">
                            <simple>${body[0].get('uuid')}</simple>
                        </setProperty>
                    </when>
                </choice>

                <setProperty name="db-event">
                    <spel>
                        #{new org.openmrs.eip.component.entity.DbEvent(getProperty('entity-id'), getProperty('debezium-table'), request.headers.CamelDebeziumOperation)}
                    </spel>
                </setProperty>

                <!-- For deletes ensure there is no pending failure otherwise downstream systems can't 'delete' what they don't have.
                     We also don't want a sequence like CREATE -> DELETE -> UPDATE which results in the entity getting recreated
                     in case of a downstream system which a listener route is sort of synchronizing to. -->
                <when>
                    <simple>${exchangeProperty.existing-retries} != null &amp;&amp; ${exchangeProperty.existing-retries.size()} > 0</simple>
                    <log message="Moving delete event to failure queue because the entity has ${exchangeProperty.existing-retries.size()} event(s) in the retry queue" />
                    <setProperty name="delete-event-message">
                        <simple>Cannot process a delete event for an entity with ${exchangeProperty.existing-retries.size()} event(s) in the retry queue</simple>
                    </setProperty>
                    <throwException exceptionType="java.lang.Exception" message="${exchangeProperty.delete-event-message}" />
                </when>

                <split parallelProcessing="true">
                    <simple>{{db-event.destinations}}</simple>
                    <setProperty name="db-event-destination">
                        <simple>${body}</simple>
                    </setProperty>

                    <log message="Publishing to destination: ${exchangeProperty.db-event-destination}" loggingLevel="DEBUG" />

                    <setBody>
                        <simple>${exchangeProperty.db-event}</simple>
                    </setBody>
                    <marshal>
                        <json library="Jackson" />
                    </marshal>

                    <!--<process ref="pgpEncryptService"/>-->
                    <toD uri="direct:${exchangeProperty.db-event-destination}" />
                </split>
            </when>
            <otherwise>
                <log message="Don't know how to handle DB event operation: ${headers.CamelDebeziumOperation} for entity: ${exchangeProperty.event-body}" loggingLevel="ERROR" />
            </otherwise>
        </choice>

    </route>
</routes>
